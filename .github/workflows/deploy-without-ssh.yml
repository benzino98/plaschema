name: Deploy to Shared Hosting (No SSH)

on:
  push:
    branches: [main]
  workflow_dispatch: # Allows manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring, intl, gd, xml, zip, dom, fileinfo, curl
          coverage: none

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "plas-app/package-lock.json"

      - name: Install Composer Dependencies
        working-directory: ./plas-app
        run: composer install --no-dev --prefer-dist --optimize-autoloader

      - name: Install NPM Dependencies
        working-directory: ./plas-app
        run: npm ci

      - name: Build Frontend Assets
        working-directory: ./plas-app
        run: npm run build

      - name: Generate .env file
        working-directory: ./plas-app
        run: |
          cp .env.example .env
          sed -i 's/APP_ENV=.*/APP_ENV=production/' .env
          sed -i 's/APP_DEBUG=.*/APP_DEBUG=false/' .env
          php artisan key:generate
          # Make sure the .env file is readable
          chmod 644 .env
          cat .env | grep APP_  # Display APP settings for verification

      # Pre-generate cache files locally
      - name: Pre-generate cache files
        working-directory: ./plas-app
        run: |
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

      # Create necessary directories that might be missing
      - name: Create necessary directories
        working-directory: ./plas-app
        run: |
          mkdir -p storage/framework/cache
          mkdir -p storage/framework/sessions
          mkdir -p storage/framework/views
          mkdir -p storage/logs
          chmod -R 775 storage bootstrap/cache

      # Prepare deployment structure
      - name: Prepare deployment structure
        run: |
          # Create a deployment directory
          mkdir -p deployment

          # Copy the Laravel application to the laravel directory
          mkdir -p deployment/laravel
          cp -r plas-app/* deployment/laravel/
          # Remove public directory from laravel folder since we'll deploy it separately
          rm -rf deployment/laravel/public

          # Create public_html directory
          mkdir -p deployment/public_html

          # Copy only the public directory contents to public_html
          cp -r plas-app/public/* deployment/public_html/

          # Update the index.php to point to the correct paths (laravel directory)
          sed -i "s|/../vendor/autoload.php|/../../laravel/vendor/autoload.php|g" deployment/public_html/index.php
          sed -i "s|/../bootstrap/app.php|/../../laravel/bootstrap/app.php|g" deployment/public_html/index.php

          # Create a file to indicate which files should not be overwritten
          echo "# Files listed here will not be overwritten during deployment" > deployment/laravel/.ftpignore
          echo ".env" >> deployment/laravel/.ftpignore
          echo "storage/app/*" >> deployment/laravel/.ftpignore
          echo "storage/framework/*" >> deployment/laravel/.ftpignore
          echo "storage/logs/*" >> deployment/laravel/.ftpignore

          # Verify .env file exists and is readable
          if [ -f "deployment/laravel/.env" ]; then
            echo ".env file exists and will be deployed"
            chmod 644 deployment/laravel/.env
            # Display the first few lines of the .env file (excluding sensitive data)
            head -n 10 deployment/laravel/.env
          else
            echo "ERROR: .env file is missing in deployment/laravel/"
            # Create a backup .env file if it's missing
            echo "Creating backup .env file..."
            echo "APP_NAME=Plaschema" > deployment/laravel/.env
            echo "APP_ENV=production" >> deployment/laravel/.env
            echo "APP_KEY=base64:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" >> deployment/laravel/.env
            echo "APP_DEBUG=false" >> deployment/laravel/.env
            echo "APP_URL=https://plaschema.pl.gov.ng" >> deployment/laravel/.env
            echo "" >> deployment/laravel/.env
            echo "LOG_CHANNEL=stack" >> deployment/laravel/.env
            echo "LOG_DEPRECATIONS_CHANNEL=null" >> deployment/laravel/.env
            echo "LOG_LEVEL=debug" >> deployment/laravel/.env
            echo "" >> deployment/laravel/.env
            echo "DB_CONNECTION=mysql" >> deployment/laravel/.env
            echo "DB_HOST=127.0.0.1" >> deployment/laravel/.env
            echo "DB_PORT=3306" >> deployment/laravel/.env
            echo "DB_DATABASE=plaschem_db" >> deployment/laravel/.env
            echo "DB_USERNAME=plaschem_user" >> deployment/laravel/.env
            echo "DB_PASSWORD=" >> deployment/laravel/.env
            echo "" >> deployment/laravel/.env
            echo "BROADCAST_DRIVER=log" >> deployment/laravel/.env
            echo "CACHE_DRIVER=file" >> deployment/laravel/.env
            echo "FILESYSTEM_DISK=local" >> deployment/laravel/.env
            echo "QUEUE_CONNECTION=sync" >> deployment/laravel/.env
            echo "SESSION_DRIVER=file" >> deployment/laravel/.env
            echo "SESSION_LIFETIME=120" >> deployment/laravel/.env
            chmod 644 deployment/laravel/.env
            echo "Backup .env file created."
          fi

          # Display the structure for verification
          echo "Deployment structure prepared:"
          find deployment -type d | sort
          ls -la deployment/laravel/ | grep -E "\.env|artisan"

      # Copy initialization file to public_html
      - name: Copy initialization file to public_html
        run: |
          cp plas-app/public/initialize_deployment.php deployment/public_html/
          chmod 644 deployment/public_html/initialize_deployment.php

          # Also copy the structure creator script for first-time setup
          cp plas-app/public/create_laravel_structure.php deployment/public_html/
          chmod 644 deployment/public_html/create_laravel_structure.php

          # Copy the .env file creator script
          cp plas-app/public/fix_env_file.php deployment/public_html/
          chmod 644 deployment/public_html/fix_env_file.php

          # Create a backup script
          cat > deployment/public_html/backup_before_deploy.php << 'EOL'
          <?php
          /**
           * Backup Important Laravel Files
           * 
           * This script creates backups of important Laravel files before deployment.
           * Run this script before deploying new code to ensure you don't lose important data.
           */

          // Set maximum execution time
          set_time_limit(300);

          // Define paths
          $home_dir = dirname($_SERVER['DOCUMENT_ROOT']);
          $laravel_root = $home_dir . '/laravel';
          $backup_dir = $home_dir . '/laravel_backups';
          $timestamp = date('Y-m-d_H-i-s');

          // Create backup directory if it doesn't exist
          if (!file_exists($backup_dir)) {
              mkdir($backup_dir, 0755, true);
          }

          // Files to backup
          $files_to_backup = [
              $laravel_root . '/.env'
          ];

          // Results
          $results = [];
          $results[] = "Starting backup process at " . date('Y-m-d H:i:s');

          // Backup individual files
          foreach ($files_to_backup as $file) {
              if (file_exists($file)) {
                  $filename = basename($file);
                  $backup_file = $backup_dir . '/' . $filename . '_' . $timestamp;
                  if (copy($file, $backup_file)) {
                      $results[] = "✅ Backed up: $file to $backup_file";
                  } else {
                      $results[] = "❌ Failed to backup: $file";
                  }
              } else {
                  $results[] = "⚠️ File not found, skipping: $file";
              }
          }

          // Backup storage directory (only important user data)
          $storage_backup_dir = $backup_dir . '/storage_' . $timestamp;
          if (!file_exists($storage_backup_dir)) {
              mkdir($storage_backup_dir, 0755, true);
          }

          // Function to recursively copy directories
          function copy_directory($source, $dest) {
              if (!is_dir($source)) {
                  return false;
              }
              
              if (!is_dir($dest)) {
                  mkdir($dest, 0755, true);
              }
              
              $dir = opendir($source);
              while (($file = readdir($dir)) !== false) {
                  if ($file != '.' && $file != '..') {
                      $src = $source . '/' . $file;
                      $dst = $dest . '/' . $file;
                      if (is_dir($src)) {
                          copy_directory($src, $dst);
                      } else {
                          copy($src, $dst);
                      }
                  }
              }
              closedir($dir);
              return true;
          }

          // Backup important storage directories
          $storage_dirs = [
              $laravel_root . '/storage/app',
              $laravel_root . '/storage/logs'
          ];

          foreach ($storage_dirs as $dir) {
              if (is_dir($dir)) {
                  $dir_name = basename($dir);
                  $backup_subdir = $storage_backup_dir . '/' . $dir_name;
                  if (copy_directory($dir, $backup_subdir)) {
                      $results[] = "✅ Backed up directory: $dir to $backup_subdir";
                  } else {
                      $results[] = "❌ Failed to backup directory: $dir";
                  }
              } else {
                  $results[] = "⚠️ Directory not found, skipping: $dir";
              }
          }

          $results[] = "Backup completed at " . date('Y-m-d H:i:s');

          // Output results
          echo "<html><head><title>Laravel Backup</title></head><body>";
          echo "<h1>Laravel Backup Results</h1>";
          echo "<pre>" . implode("\n", $results) . "</pre>";
          echo "</body></html>";
          EOL

          chmod 644 deployment/public_html/backup_before_deploy.php

          # Create a directory structure helper file
          mkdir -p deployment/structure_helper
          echo "This file helps create the Laravel directory on the server. You can safely delete it." > deployment/structure_helper/README.txt

      # Create Laravel directory on the server
      - name: Create Laravel directory on server
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./deployment/structure_helper/
          server-dir: laravel/
          dangerous-clean-slate: false
          state: "keep"

      # Deploy Laravel core files
      - name: Deploy Laravel core files
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./deployment/laravel/
          server-dir: laravel/
          dangerous-clean-slate: false
          state: "keep"
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            **/tests/**
            **/.github/**
            .env
            storage/app/**
            storage/framework/**
            storage/logs/**

      # Deploy public files
      - name: Deploy public files
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./deployment/public_html/
          server-dir: public_html/
          dangerous-clean-slate: false
          state: "keep"

      - name: Post-deployment notification
        run: |
          echo "Deployment completed!"
          echo "IMPORTANT: Before making any changes to your site, run the backup script first:"
          echo "Visit https://plaschema.pl.gov.ng/backup_before_deploy.php to create a backup of important files."
          echo "Then visit https://plaschema.pl.gov.ng/initialize_deployment.php to complete the setup."
          echo "Laravel core files deployed to: laravel/ (in your home directory)"
          echo "Public files deployed to: public_html/ (in your home directory)"
          echo "NOTE: Your existing .env file and storage directory contents have been preserved."
